<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 태그 내부에 sql문을 넣으면 mybatis가 알아서 해준다.. -->
<mapper namespace="com.soninlawisdice.mapper.SecondhandMapper">
	<!-- namespace를 만든 인터페이스와 맞춰주기 -->
	<!-- id를 service의 함수명과 맞춰주기 -->
	<!-- resultType을 지정해주면 해당 클래스 타입으로 결과값이 저장된다. -->
	

	<!-- list -->
	<select id="selectTradeList" resultType="java.util.HashMap" >
	
		SELECT 
			*
		FROM (
				SELECT 
					T.*, M.M_NICK, M.M_ID, S.S_CONTENT, 
					ROW_NUMBER() OVER(
						<choose>
							<when test = "sort == 'hit'">ORDER BY T_HIT DESC</when>
							<when test = "sort == 'report'">ORDER BY T_REPORT_NUM DESC </when>
							<otherwise>ORDER BY T_NO DESC</otherwise>
						</choose>
						
					) AS RNUM 
				FROM
					TRADE T
				LEFT JOIN
					MEMBER M
				ON 
					T.M_NO = M.M_NO
				LEFT JOIN
					SUBJECT S
				ON 
					T.S_NO = S.S_NO					
				WHERE 
					1=1 
					<include refid="subjectSearch"></include>
					<include refid="tradeSearch"></include>
			) 
		WHERE 
			RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
			<choose>
				<when test = "sort == 'hit'">ORDER BY T_HIT DESC</when>
				<when test = "sort == 'report'">ORDER BY T_REPORT_NUM DESC </when>
				<otherwise>ORDER BY T_NO DESC</otherwise>
			</choose>
		
	</select> <!-- 1=1 조건 달아야, 처음에 검색어 없이 호출시에도, WHERE 하나만 남아서 BadGrammarException이 뜨지 않는다.. -->
	
	
	<!-- list count -->	
	<select id="tradeListCount" resultType="int">

		SELECT 
			COUNT(T.T_NO)
		FROM 
			TRADE T
		LEFT JOIN
			MEMBER M
		ON 
			T.M_NO = M.M_NO
		LEFT JOIN
			SUBJECT S
		ON 
			T.S_NO = S.S_NO	
		WHERE 
			1=1 
			<include refid="subjectSearch"></include>	
			<include refid="tradeSearch"></include>
			AND T_NO > 0

	</select>
	
	
	<!-- 검색조건 sql -->
	<sql id="tradeSearch">
		<if test="scri.searchType != null">
			<if test="scri.searchType == 't'.toString()">AND T_TITLE LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'c'.toString()">AND T_CONTENT LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'w'.toString()">AND M_NICK LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'tc'.toString()">
					AND (T_TITLE LIKE '%' || #{scri.keyword} || '%') or (T_CONTENT LIKE '%' || #{scri.keyword} || '%')</if>
		</if>
	</sql>
	
	<sql id="subjectSearch">
		<if test="s_content != null">
			<if test="s_content == 's'.toString()">AND S_CONTENT LIKE '판매중'</if>
			<if test="s_content == 'b'.toString()">AND S_CONTENT LIKE '구매중'</if>
			<if test="s_content == 'c'.toString()">AND S_CONTENT LIKE '거래완료'</if>
		</if>
	</sql>
	
	
<!-- =================================================================================================== -->	
	<!-- 글 보기(content_view) -->
	<select id="selectContentOne" resultType="java.util.HashMap" parameterType="int">
	
		SELECT 
			T.*, M.M_NICK, M.M_ID, S.S_CONTENT
		FROM
			TRADE T
		LEFT JOIN
			MEMBER M
		ON 
			T.M_NO = M.M_NO
		LEFT JOIN
			SUBJECT S
		ON 
			T.S_NO = S.S_NO
		WHERE
			T_NO = #{t_no}
			
	</select> 
	
	
	<!-- 글 보기(content_view): 게임, 가격 가져오기 -->
	<select id="selectTrade_gameList" resultType="com.soninlawisdice.vo.Trade_gameVO" parameterType="int">
	
		SELECT 
			*
		FROM
			TRADE_GAME TG
		WHERE
			T_NO = #{t_no}
		ORDER BY 
			TG_NO ASC
			
	</select> 
	
	
	<!-- 글 삭제 -->
	<delete id="deleteContent">
	
		DELETE 
		FROM 
			TRADE 
		WHERE 
			T_NO = #{t_no}
			
	</delete>
	
	
	<!-- 조회수 -->
	<update id="upHitContent">
	
		UPDATE
			TRADE 
		SET 
			T_HIT = T_HIT + 1 
		WHERE
			T_NO = #{t_no}
			
	</update>
	
	
	<!-- 글쓰기 : 다중 INSERT -->
	<!-- Map을 사용할때 index는 key객체가 되고 항목은 value객체 -->
	
	<!-- get_trade_seq 함수 생성하여 현재 trade_seq 리턴 -->
	<!-- oracle db에 생성한 함수는 다음과 같다. -->
	<!-- 		 
		CREATE FUNCTION get_trade_game_seq RETURN NUMBER IS
		BEGIN
		  RETURN TRADE_GAME_SEQ.nextval;
		END;
		/
	 -->
	<insert id="insertTrade" >
	
		INSERT ALL
		INTO
			TRADE 
			(T_NO, M_NO, S_NO, T_TITLE, T_CONTENT) 
		VALUES 
			(trade_seq.nextval, #{m_no}, #{tradeVO.s_no},  #{tradeVO.t_title}, #{tradeVO.t_content}) 	
		
		<foreach collection="gamePrice" index="game" item="price">		
			INTO
				TRADE_GAME 
				(TG_NO, T_NO, G_NO, TG_NAME, TG_PRICE ) 
			VALUES 
				(get_trade_game_seq, trade_seq.nextval, null, #{game}, #{price} )
		</foreach>
			
		SELECT  
			*
		FROM 
			DUAL			
		
	</insert>	

	
	<!-- 글 작성시 10 포인트 적립 -->
	<update id = "boardPointUpdate">
		UPDATE 
			MEMBER 
		SET 
			M_POINT = M_POINT + 10 
		WHERE 
			M_NO = #{m_no} 
	</update>
	
	
<!-- =================================================================================================== -->	
	<!-- 글 수정: TRADE -->
	<update id="modify" statementType="CALLABLE" >
		{ CALL
			DECLARE
			      
			      TYPE tg_no_table IS TABLE OF trade_game.tg_no%TYPE 
			            INDEX BY BINARY_INTEGER;             
			      TYPE tg_name_table IS TABLE OF trade_game.tg_name%TYPE 
			            INDEX BY BINARY_INTEGER;       
			      TYPE tg_price_table IS TABLE OF trade_game.tg_price%TYPE 
			            INDEX BY BINARY_INTEGER;      

			
				    tg_no_tab       tg_no_table;       	<!--  해당 글에 이미 있는 tg_no 담기 -->
				    tg_name_tab    tg_name_table;		<!--  mybatis  foreach 로 게임 담기 -->
				    tg_price_tab    tg_price_table;     <!--  mybatis  foreach 로 가격 담기 -->
				     
				     nocnt binary_integer :=0;
				     gcnt binary_integer :=0;
				     j binary_integer :=0;
				     
				     <!-- 글번호 넣기-->
				     v_t_no     trade_game.t_no%type := #{tradeVO.t_no};
			     
			
			   BEGIN
			    
			      <!-- trade(보부상) 글 수정 -->
				  UPDATE 
				  	TRADE
				  SET 
					S_NO = #{tradeVO.s_no},
					T_TITLE = #{tradeVO.t_title},
					T_CONTENT = #{tradeVO.t_content},
					T_UPDATED_DATE = SYSDATE						
				  	<if	test="tradeVO.t_island == 1">
							, T_ISLAND = 2
					</if>
				  WHERE 
				  	T_NO = v_t_no;
				  
				  commit;
			    
			     <!-- 여기부턴 trade_game(게임, 가격) 수정 -->
			    
			     <!-- 해당 글의 tg_no 가져오기.. -->
			     for tg_nolist in (select tg_no from trade_game where t_no = v_t_no) loop			     
			        nocnt := nocnt +1;			        
			        tg_no_tab(nocnt) := tg_nolist.tg_no;			        
			     end loop; 
			          
			     <!-- mybatis  foreach 로 게임 담기-->
					<foreach collection="gamePrice" index="game" item="price">	
					    gcnt := gcnt +1;
					    tg_name_tab(gcnt) := #{game};
					    tg_price_tab(gcnt)  := #{price};
					</foreach>
 		        
			     <!-- 조건 3가지에 따른 update -->
			        IF tg_name_tab.count = tg_no_tab.count THEN
			
			           for cnt in 1..tg_no_tab.count  loop     
			                -- j := j +1;             
			                update trade_game SET tg_name = tg_name_tab(cnt), tg_price = tg_price_tab(cnt) where tg_no = tg_no_tab(cnt);
			                commit;        
			           end loop;
			
			        ELSIF tg_name_tab.count > tg_no_tab.count THEN
			
			           for cnt in 1..tg_no_tab.count  loop     
			                -- j := j +1;             
			                update trade_game SET tg_name = tg_name_tab(cnt), tg_price = tg_price_tab(cnt) where tg_no = tg_no_tab(cnt);
			                commit;        
			           end loop;
			            
			           for cnt in tg_no_tab.count+1..tg_name_tab.count  loop     
			                -- j := j +1;             
			                insert into trade_game (tg_no, t_no, g_no, tg_name, tg_price) values (get_trade_game_seq, v_t_no, null,  tg_name_tab(cnt), tg_price_tab(cnt));
			                commit;        
			           end loop;
			
			        ELSE
			
			           for cnt in 1..tg_name_tab.count  loop     
			                -- j := j +1;             
			                update trade_game SET tg_name = tg_name_tab(cnt), tg_price = tg_price_tab(cnt) where tg_no = tg_no_tab(cnt);
			                commit;        
			           end loop;
			            
			           for cnt in tg_name_tab.count+1..tg_no_tab.count  loop     
			                -- j := j +1;                    
			                DELETE 	FROM trade_game WHERE tg_no = tg_no_tab(cnt);
			                commit;        
			           end loop;
			
			        END IF;
			
			   END		 
		}
  
	</update>
	
<!-- =================================================================================================== -->	
	<!-- 구매요청(판매중-> 거래하기 modal-> checkbox 구매요청) -->	
	<insert id="call_buy" statementType="CALLABLE" >
		<!-- 1. payment에 합계금액 계산해 넣고 insert-->
		<!-- 2. tg_noList에서 tg_no 하나씩 꺼내서 PTG에 해당 결제번호와 tg_no 한 줄씩 insert -->

		{ CALL		
            DECLARE
            			      
                TYPE tg_no_table IS TABLE OF trade_game.tg_no%TYPE 
                INDEX BY BINARY_INTEGER;             
                TYPE tg_name_table IS TABLE OF trade_game.tg_name%TYPE 
                INDEX BY BINARY_INTEGER;       
                TYPE tg_price_table IS TABLE OF trade_game.tg_price%TYPE 
                INDEX BY BINARY_INTEGER;     
                
                
                tg_no_tab       tg_no_table;       	<!--  tg_no 담기 -->
                tg_name_tab    tg_name_table;		<!--  mybatis  foreach 로 게임 담기 -->
                tg_price_tab    tg_price_table;     <!--  mybatis  foreach 로 가격 담기 -->
                
                nocnt binary_integer :=0;
                gcnt binary_integer :=0;
                j binary_integer :=0;
                
                <!-- 변수 선언 -->
                v_sum     payment.p_price%type := 0;
                v_t_no     trade_game.t_no%type := #{tradeVO.t_no};
                v_p_no    payment.p_no%type := payment_seq.nextval;
			     
			
            BEGIN
            
                <!-- mybatis  foreach 로 번호, 게임, 가격 담기-->
                <foreach collection="tg_noList" item="tg_no">
                
                    nocnt := nocnt +1;
                    tg_no_tab(nocnt) := #{tg_no}; <!-- 컬렉션 아이템은 그냥 #{아이템}으로 가져와!! -->
                                
                    SELECT tg_name, tg_price
                    INTO tg_name_tab(nocnt), tg_price_tab(nocnt)
                    FROM trade_game
                    WHERE tg_no =  tg_no_tab(nocnt);

                </foreach>    
                
                
                <!-- 결제할 가격 합계 구하기 -->
                for cnt in 1..tg_price_tab.count  loop 
                    v_sum := v_sum + tg_price_tab(cnt);
                end loop;
            
            
                <!-- payment  insert -->
                INSERT 
                INTO
                    PAYMENT 
                    (P_NO, T_NO, M_SNO, M_BNO, P_PRICE) 
                VALUES 
                    (v_p_no, v_t_no, #{tradeVO.m_no}, #{buyer}, v_sum );
                COMMIT;
                    
                <!-- payment_trade_game  insert -->
                for cnt in 1..tg_no_tab.count  loop 
                    INSERT 
                    INTO
                        PAYMENT_TRADE_GAME
                        (PTG_NO, P_NO, TG_NO) 
                    VALUES 
                        (payment_trade_game_seq.nextval, v_p_no, tg_no_tab(cnt) );
                    COMMIT;
                end loop;      
			
            END
		}
		
	</insert>


</mapper>