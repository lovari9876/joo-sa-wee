<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 태그 내부에 sql문을 넣으면 mybatis가 알아서 해준다.. -->
<mapper namespace="com.soninlawisdice.mapper.SecondhandMapper">
	<!-- namespace를 만든 인터페이스와 맞춰주기 -->
	<!-- id를 service의 함수명과 맞춰주기 -->
	<!-- resultType을 지정해주면 해당 클래스 타입으로 결과값이 저장된다. -->
	

	<!-- list -->
	<select id="selectTradeList" resultType="java.util.HashMap" >
	
		SELECT 
			*
		FROM (
				SELECT 
					T.*, M.M_NICK, M.M_ID, S.S_CONTENT, ROW_NUMBER() OVER(ORDER BY T_NO DESC) AS RNUM 
				FROM
					TRADE T
				LEFT JOIN
					MEMBER M
				ON 
					T.M_NO = M.M_NO
				LEFT JOIN
					SUBJECT S
				ON 
					T.S_NO = S.S_NO					
				WHERE 
					1=1 
					<include refid="subjectSearch"></include>
					<include refid="tradeSearch"></include>
			) 
		WHERE 
			RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
		ORDER BY
			T_NO DESC
				
	</select> <!-- 1=1 조건 달아야, 처음에 검색어 없이 호출시에도, WHERE 하나만 남아서 BadGrammarException이 뜨지 않는다.. -->
	
	
	<!-- list count -->	
	<select id="tradeListCount" resultType="int">

		SELECT 
			COUNT(T.T_NO)
		FROM 
			TRADE T
		LEFT JOIN
			MEMBER M
		ON 
			T.M_NO = M.M_NO
		LEFT JOIN
			SUBJECT S
		ON 
			T.S_NO = S.S_NO	
		WHERE 
			1=1 
			<include refid="subjectSearch"></include>	
			<include refid="tradeSearch"></include>
			AND T_NO > 0

	</select>
	
	
	<!-- 글 보기(content_view) -->
	<select id="selectContentOne" resultType="java.util.HashMap" parameterType="int">
	
		SELECT 
			T.*, M.M_NICK, M.M_ID, S.S_CONTENT
		FROM
			TRADE T
		LEFT JOIN
			MEMBER M
		ON 
			T.M_NO = M.M_NO
		LEFT JOIN
			SUBJECT S
		ON 
			T.S_NO = S.S_NO
		WHERE
			T_NO = #{t_no}
			
	</select> 
	
	
	<!-- 글 보기(content_view): 게임, 가격 가져오기 -->
	<select id="selectTrade_gameList" resultType="java.util.HashMap" parameterType="int">
	
		SELECT 
			*
		FROM
			TRADE_GAME TG
		WHERE
			T_NO = #{t_no}
		ORDER BY 
			TG_NO ASC
			
	</select> 
	
	
	<!-- 글 삭제 -->
	<delete id="deleteContent">
	
		DELETE 
		FROM 
			TRADE 
		WHERE 
			T_NO = #{t_no}
			
	</delete>
	
	
	<!-- 조회수 -->
	<update id="upHitContent">
	
		UPDATE
			TRADE 
		SET 
			T_HIT = T_HIT + 1 
		WHERE
			T_NO = #{t_no}
			
	</update>
	
	
	<!-- 글쓰기 : 다중 INSERT -->
	<!-- Map을 사용할때 index는 key객체가 되고 항목은 value객체 -->
	<insert id="insertTrade" >
	
		INSERT ALL
		INTO
			TRADE 
			(T_NO, M_NO, S_NO, T_TITLE, T_CONTENT) 
		VALUES 
			(trade_seq.nextval, #{m_no}, #{tradeVO.s_no},  #{tradeVO.t_title}, #{tradeVO.t_content}) 	
		
		<foreach collection="gamePrice" index="game" item="price">		
			INTO
				TRADE_GAME 
				(TG_NO, T_NO, G_NO, TG_NAME, TG_PRICE ) 
			VALUES 
				(get_trade_seq, trade_seq.nextval, null, #{game}, #{price} )
		</foreach>
			
		SELECT  
			*
		FROM 
			DUAL			
		
	</insert>	

	
	<!-- 글 작성시 10 포인트 적립 -->
	<update id = "boardPointUpdate">
		UPDATE 
			MEMBER 
		SET 
			M_POINT = M_POINT + 10 
		WHERE 
			M_NO = #{m_no} 
	</update>
	
	
	<!-- modify_view 로 불러오기 -->
	<select id = "modify_view" resultType = "com.soninlawisdice.vo.TradeVO">
		select bw_no, bt_no, s_no, bw_title, bw_content
		from board_write
		where bw_no = #{bw_no}
	</select>
	
	
	<!-- 글 수정 -->
	<update id="modify" parameterType="com.soninlawisdice.vo.TradeVO">
		update board_write 
		set bt_no = #{board_writeVO.bt_no}, 
		s_no = #{board_writeVO.s_no}, 
		bw_title = #{board_writeVO.bw_title}, 
		bw_content = #{board_writeVO.bw_content} 
		where bw_no = #{board_writeVO.bw_no}
	</update>
	
	
	<!-- 검색조건 sql -->
	<sql id="tradeSearch">
		<if test="scri.searchType != null">
			<if test="scri.searchType == 't'.toString()">AND T_TITLE LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'c'.toString()">AND T_CONTENT LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'w'.toString()">AND M_NICK LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'tc'.toString()">
					AND (T_TITLE LIKE '%' || #{scri.keyword} || '%') or (T_CONTENT LIKE '%' || #{scri.keyword} || '%')</if>
		</if>
	</sql>
	
	<sql id="subjectSearch">
		<if test="s_content != null">
			<if test="s_content == 's'.toString()">AND S_CONTENT LIKE '판매중'</if>
			<if test="s_content == 'b'.toString()">AND S_CONTENT LIKE '구매중'</if>
			<if test="s_content == 'c'.toString()">AND S_CONTENT LIKE '거래완료'</if>
		</if>
	</sql>

</mapper>