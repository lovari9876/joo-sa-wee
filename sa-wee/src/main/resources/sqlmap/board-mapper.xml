<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
    "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- mapper 태그 내부에 sql문을 넣으면 mybatis가 알아서 해준다.. -->
<mapper namespace="com.soninlawisdice.mapper.BoardMapper">
	
	<!-- 커뮤니티 게시판  -->
	<resultMap type="com.soninlawisdice.vo.Board_writeVO" 
		id="Board_writeVO">
		<result column="bw_no" property="bw_no" />
		<result column="bt_no" property="bt_no" />
		<result column="m_no" property="m_no" />
		<result column="s_no" property="s_no" />
		<result column="bw_title" property="bw_title" />
		<result column="bw_content" property="bw_content" />
		<result column="bw_written_date" property="bw_written_date" />
		<result column="bw_updated_date" property="bw_updated_date" />
		<result column="bw_hit" property="bw_hit" />
		<result column="bw_recommend_num" property="bw_recommend_num" />
		<result column="bw_report_num" property="bw_report_num" />
		<result column="bw_island" property="bw_island" />
		<result column="bw_secret" property="bw_secret" />
		
		<collection javaType="com.soninlawisdice.vo.MemberVO"
			property="memberVO">
			<id column="m_no" property="m_no" />
			<result column="m_nick" property="m_nick" />
		</collection>
		<collection javaType="com.soninlawisdice.vo.SubjectVO"
			property="subjectVO">
			<id column="s_no" property="s_no" />
			<result column="s_content" property="s_content" />
		</collection>
		<collection javaType="com.soninlawisdice.vo.Board_typeVO"
			property="board_typeVO">
			<id column="bt_no" property="bt_no" />
			<result column="bt_name" property="bt_name" />
		</collection>
	
	</resultMap>
	
	
	
	
<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ메인:베스트,핫이슈ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->	
	<!-- 히트다 히트  : 조회순-->
	<select id="selectHitList" resultType = "java.util.HashMap">
		<![CDATA[ 	select rownum, bw.*, bt.bt_name , m.m_nick
					from (select * from board_write order by bw_hit desc) bw ,board_type bt,member m 
					where bt.bt_no = bw.bt_no 
					and m.m_no = bw.m_no 
		 			and rownum <= 10  ]]>
	</select>
	 
	<!-- 베스트 : 추천순 -->
	<select id = "selectBestList" resultType = "java.util.HashMap">
		<![CDATA[ SELECT 
					* 
					FROM

						(SELECT row_number() OVER(ORDER BY I_RECOMMEND_NUM DESC) AS RNUM, I.* 
    						FROM
    							(
    								(SELECT bw.bw_no AS I_NO, bt.bt_name AS I_NAME, bw.bw_title AS I_TITLE,
    								m.m_nick, bw.bw_written_date AS I_WRITTEN_DATE, bw.bw_recommend_num AS I_RECOMMEND_NUM
        								
        							FROM board_write bw , member m, board_type bt 
        							WHERE bw.m_no = m.m_no AND bw.bt_no = bt.bt_no 
        							AND bw.bw_island = 0)
        
        							UNION
        
        							(SELECT cr.cr_no AS I_NO, bt.bt_name AS I_NAME, cr.cr_title AS I_TITLE,
        							m.m_nick, cr.cr_written_date AS I_WRITTEN_DATE, cr.cr_recommend_num AS I_RECOMMEND_NUM
        
        							FROM cafe_review cr, board_type bt , member m 
        							WHERE cr.bt_no = bt.bt_no  AND cr.m_no = m.m_no 
        							AND cr.cr_island = 0)
        							)I
								)
							WHERE RNUM <= 10
							ORDER BY I_RECOMMEND_NUM desc
		]]>
	</select>
	
	

<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ커뮤니티ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->	
	
	<!-- 커뮤니티 전체보기 -->
	<select id = "selectBoardList" resultType = "java.util.HashMap">
		SELECT * FROM
	(
         SELECT bw.bw_no, m.m_no, m.m_id,m.m_nick, bt.bt_name, bt.bt_no, s.s_content , bw.bw_title, bw.bw_hit, bw.bw_content, bw.bw_written_date, bw.bw_updated_date, bw.bw_report_num, bw.bw_island, bw.bw_recommend_num,
         				(select count(*) from cm_comment where cm_type = '게시판' and cm_no2 = bw.bw_no) cm,
		               ROW_NUMBER() OVER(ORDER BY bw.bw_no DESC) AS RNUM
		          FROM board_write bw
                 INNER JOIN subject s
                 ON bw.s_no=s.s_no
                 INNER JOIN board_type bt
                 ON bw.bt_no = bt.bt_no
                INNER JOIN member m
                ON bw.m_no=m.m_no
                
                
              <choose>
                	<when test = "bt_no == 13">
                		WHERE bt.bt_no BETWEEN 1 and 6
                	</when>
                	<otherwise> 
                		WHERE bt.bt_no = #{bt_no}
                	</otherwise>
                </choose> 
		        AND bw.bw_island = 0
		         <include refid="board_search"></include>
		                       )
		WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
		ORDER BY bw_no DESC
	</select>
	
	<select id="cboard_listCount" resultType="int">

		SELECT COUNT(bw.bw_no)
		  FROM board_write bw
		  LEFT JOIN board_type bt
		  ON bw.bt_no = bt.bt_no
		  LEFT JOIN member m
		  ON bw.m_no = m.m_no
		 
		 <choose>
           <when test = "bt_no == 13"> <!-- 게시글 관리 : 커뮤니티 전체 불러오기  -->
               WHERE bt.bt_no BETWEEN 1 and 6
            </when>
            <otherwise> 
                WHERE bt.bt_no = #{bt_no}
            </otherwise>
         </choose> 
         AND bw.bw_island = 0
		 <include refid="board_search"></include>	
		 AND bw.bw_no > 0

	</select>
	
	<!-- 일단일단일단... -->
	<select id = "selectBoardSub" resultType = "java.util.HashMap" parameterType = "int">
		select bw.*,  m.m_nick, s.s_content
		from board_write bw, member m, subject s 
		where bw.m_no = m.m_no and bw.s_no = s.s_no
		and bw.s_no = #{s_no}
		and bw.bw_island = 0
		order by bw.bw_no desc
	</select> 
	
	
	
	<!-- 게시글 작성하기  -->
	<!--회원 번호 넣는 거 어떻게 할건디  -->

	<insert id="insertBoard" parameterType="com.soninlawisdice.vo.Board_writeVO">
		insert into board_write 
		(bw_no, m_no, bt_no, s_no, bw_title, bw_content, bw_hit, bw_recommend_num, bw_report_num, bw_island, bw_secret) 
		values 
		( board_write_seq.nextval, 11, #{board_writeVO.bt_no}, #{board_writeVO.s_no},  #{board_writeVO.bw_title}, #{board_writeVO.bw_content}, 0, 0, 0, 0, 'n' ) 
	</insert>
	
	<!-- modify_view 로 불러오기 -->
	<select id = "modify_view" resultType = "com.soninlawisdice.vo.Board_writeVO">
		select bw_no, bt_no, s_no, bw_title, bw_content, bw_island
		from board_write
		where bw_no = #{bw_no}
	</select>
	
	<!-- 글 수정하기 -->
	<update id="modify" parameterType="com.soninlawisdice.vo.Board_writeVO">
		update board_write 
		set bt_no = #{board_writeVO.bt_no}, 
		s_no = #{board_writeVO.s_no}, 
		bw_title = #{board_writeVO.bw_title}, 
		bw_content = #{board_writeVO.bw_content},
		bw_updated_date = SYSDATE
		<if test="board_writeVO.bw_island==1" >
			, bw_island = 2
		</if> 
		where bw_no = #{board_writeVO.bw_no}
	</update>
	
	
	
	
<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ카페 리뷰, 카페정보ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	
	<!-- 카페리뷰 게시판 -->
	<resultMap type="com.soninlawisdice.vo.Cafe_reviewVO" 
		id="Cafe_reivewVO">
		<result column="cr_no" property="cr_no" />
		<result column="bt_no" property="bt_no" />
		<result column="m_no" property="m_no" />
		<result column="c_no" property="c_no" />
		<result column="cr_title" property="cr_title" />
		<result column="cr_content" property="cr_content" />
		<result column="cr_written_date" property="cr_written_date" />
		<result column="cr_updated_date" property="cr_updated_date" />
		<result column="cr_hit" property="cr_hit" />
		<result column="cr_recommend_num" property="cr_recommend_num" />
		<result column="cr_report_num" property="cr_report_num" />
		<result column="cr_island" property="cr_island" />
		
		<collection javaType="com.soninlawisdice.vo.MemberVO"
			property="memberVO">
			<id column="m_no" property="m_no" />
			<result column="m_nick" property="m_nick" />
		</collection>
		<collection javaType="com.soninlawisdice.vo.CafeVO"
			property="cafeVO">
			<id column="c_no" property="c_no" />
			<result column="c_title" property="c_title" />
		</collection>
	
	</resultMap>
	
	<!-- 카페 목록들 싹다 -->
	<select id = "selectAllCafeList" resultType = "java.util.HashMap" parameterType = "com.soninlawisdice.vo.SearchCriteria">
		
		SELECT * FROM
		(select c.* , ROW_NUMBER() OVER(ORDER BY c.c_no DESC) AS RNUM 
		from cafe c
		where c.c_no > 0
		<include refid="cafe_search"></include>
		)
		WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
		ORDER BY c_no DESC
		
	</select>
	
	<!-- 카페 지역별로 나누기 -->
	<select id = "selectCafeLoc" resultType = "java.util.HashMap">
	
		SELECT * FROM
			<choose>
				<when test="c_add == '전체'">
					(select c.*, ROW_NUMBER() OVER(ORDER BY c.c_no DESC) AS RNUM from cafe c)
				</when>
				<otherwise>
					(select c.*, ROW_NUMBER() OVER(ORDER BY c.c_no DESC) AS RNUM 
					from cafe c where substr(c_add,1,3) like #{c_add}||'%')
				</otherwise>
			</choose>
			WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
	</select>
	
	<!-- 카페리뷰 리스트 전체보기 / 모든 카페에 관한 리뷰들 싹다-->
	<select id = "selectAllReviewList"  resultType = "java.util.HashMap" parameterType = "com.soninlawisdice.vo.SearchCriteria">
		SELECT * FROM
			(
				select cr.cr_no, m.m_nick, cr.cr_title,  cr.cr_written_date, cr.cr_recommend_num, cr.cr_hit, c.c_title  
				, (select count(*) from cm_comment where cm_type = '카페리뷰' and cm_no2 = cr.cr_no) AS cm
				, ROW_NUMBER() OVER(ORDER BY cr.cr_no DESC) AS RNUM
				from cafe_review cr, member m, cafe c 
				where cr.m_no = m.m_no and cr.c_no = c.c_no
				and cr.cr_island = 0
				<include refid="cafeReview_search"></include>
				order by cr.cr_no desc
			)
			WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
			ORDER BY cr_no DESC
			
	</select>
	
	<!-- 카페 리뷰 리스트에서 review_content_view 로-->
	<select id = "selectReviewOne"  resultType = "java.util.HashMap">
		select cr.cr_no, m.m_nick, cr.cr_title, cr.cr_content, cr.cr_hit, cr.cr_written_date, cr.cr_updated_date, cr.cr_recommend_num, cr.cr_hit, cr.cr_island, c.c_title 
		from cafe_review cr, member m, cafe c
		where cr.m_no = m.m_no and cr.c_no = c.c_no
		and cr_no = #{cr_no}
	</select>
	
	<!-- 카페별로 밑에 리뷰 리스트 있는거 -->
	<select id = "selectCafeReviewList" resultType = "java.util.HashMap">
		SELECT * FROM		
			(	
				select cr.cr_no, m.m_nick, cr.cr_title, cr.cr_written_date, cr.cr_recommend_num, cr.cr_hit, c.c_title  
				, (select count(*) from cm_comment where cm_type = '카페리뷰' and cm_no2 = cr.cr_no) AS cm
				, ROW_NUMBER() OVER(ORDER BY cr.cr_no DESC) AS RNUM
				from cafe_review cr, member m, cafe c 
				where cr.m_no = m.m_no and cr.c_no = c.c_no
				and cr.c_no = #{c_no}
				and cr.cr_island = 0
				<include refid="cafeReview_search"></include>
				order by cr_no desc
			)
			WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
	</select>
	
	<select id="cafe_listCount" resultType="int">

		SELECT COUNT(c.c_no)
		  FROM cafe c
          WHERE c.c_no > 0
		 <include refid="cafe_search"></include>
	</select>
	
	<select id="allCafeReview_Count" resultType="int">

		SELECT COUNT(cr.cr_no)
		  FROM cafe_review cr
		  LEFT JOIN cafe c
		  ON cr.c_no = c.c_no
		  LEFT JOIN member m
		  ON cr.m_no = m.m_no
		 
         WHERE cr.cr_island = 0
		<include refid="cafeReview_search"></include>
		 AND cr.cr_no > 0

	</select>
	
	<select id="cafeReview_Count" resultType="int">

		SELECT COUNT(cr.cr_no)
		  FROM cafe_review cr
		  LEFT JOIN cafe c
		  ON cr.c_no = c.c_no
		  LEFT JOIN member m
		  ON cr.m_no = m.m_no
		 
		 WHERE cr.c_no = #{c_no}
         AND cr.cr_island = 0
		 <!-- <include refid="board_search"></include>	 -->
		 AND cr.cr_no > 0

	</select>
	
	
	
	<!-- 카페 정보(하나) 가져오기 -->
	<select id = "selectCafeInfo" resultType = "com.soninlawisdice.vo.CafeVO">
		select * from cafe where c_no = #{c_no}
	</select>
	
	<!-- 카페 리뷰 조회수 올리기 -->
	<update id = "review_uphit">
		update cafe_review set cr_hit = cr_hit+1 where cr_no = #{cr_no}
	</update>
	
	<!-- 추천하기 눌렀을때 cr_recommend_num 증가하는 -->
	<update id = "review_recommend">
		update cafe_review set cr_recommend_num = cr_recommend_num+1 where cr_no = #{cr_no}
	</update>
	
	<!-- 추천하기 후 숫자 올라가는거 ajax 로 하기위한.  -->
	<select id="review_rec" resultType = "string">
		select cr_recommend_num from cafe_review where cr_no = #{cr_no}
	</select>
	
	<!-- 카페 번호로 카페 이름만 가져오기 -->
	<select id = "get_CafeName" resultType = "string">
		select c_title from cafe where c_no = #{c_no}
	</select>
	
	<!-- 회원번호 수정해야함 -->
	<!-- 카페 리뷰 작성하기 -->
	<insert id="insertReview" parameterType="com.soninlawisdice.vo.Cafe_reviewVO">
		insert into cafe_review 
		(cr_no, m_no, bt_no, c_no,  cr_title, cr_content, cr_hit, cr_recommend_num, cr_report_num, cr_island) 
		values 
		( cafe_review_seq.nextval, 5, 11, #{cafe_reviewVO.c_no}, #{cafe_reviewVO.cr_title}, #{cafe_reviewVO.cr_content}, 0, 0, 0, 0 ) 
	</insert>
	
	<!--리뷰 수정하기  -->
	<update id="review_modify" parameterType="com.soninlawisdice.vo.Cafe_reviewVO">
		update cafe_review 
		set cr_title = #{cafe_reivewVO.cr_title},
		 cr_content = #{cafe_reivewVO.cr_content},
		 cr_updated_date = SYSDATE
		 <if test="cafe_reivewVO.cr_island == 1" >
			, cr_island = 2
		</if>
		 where cr_no = #{cafe_reivewVO.cr_no}
	</update>
	
	<!-- 리뷰삭제하기 -->
	<delete id="review_delete">
		delete from cafe_review where cr_no = #{cr_no}
	</delete>
	
<!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 1 : 1 문의ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ -->
	<!-- 1:1 문의 목록 -->
	<select id = "selectQuestionList"  resultType = "java.util.HashMap">
		SELECT * FROM(
		select bw.bw_no, bw.bw_title, bw.bw_written_date, bw.bw_hit, m.m_nick, s.s_content, bw.s_no, bw.bw_secret,
		ROW_NUMBER() OVER(ORDER BY BW.BW_NO DESC) AS RNUM,
		(select count(*) from cm_comment where cm_type = '게시판' and cm_no2 = bw.bw_no) cm
		from board_write bw, member m, subject s 
		where bw.m_no = m.m_no and bw.s_no = s.s_no
		and bw.bt_no = 8
		and bw.bw_island = 0
		<include refid="board_search"></include>
		)
		WHERE RNUM BETWEEN #{scri.rowStart} AND #{scri.rowEnd}
	</select>
	
	<!--1:1문의 작성하기  m_no 수정해야함 //bt_no 은 수정할 필요 없을 듯-->
	<insert id = "insertQuestion" parameterType="com.soninlawisdice.vo.Board_writeVO">
		<choose>
			<when test="board_writeVO.bw_secret == null">
				insert into board_write 
				(bw_no, m_no, bt_no, s_no, bw_title, bw_content, bw_hit, bw_recommend_num, bw_report_num, bw_island, bw_secret) 
				values
				(board_write_seq.nextval, 11, 8, #{board_writeVO.s_no},  #{board_writeVO.bw_title}, #{board_writeVO.bw_content}, 0, 0, 0, 0, 'n' ) 
			</when>
			<otherwise>
				insert into board_write (bw_no, m_no, bt_no, s_no, bw_title, bw_content, bw_hit, bw_recommend_num, bw_report_num, bw_island, bw_secret) 
				values (board_write_seq.nextval, 11, 8, #{board_writeVO.s_no},  #{board_writeVO.bw_title}, #{board_writeVO.bw_content}, 0, 0, 0, 0, #{board_writeVO.bw_secret} ) 
			
			</otherwise>
		</choose>
	</insert>
	
	<!-- content_view 따로 만들지, 있는거 수정할지. -->
	<!-- 비밀글은 못보게 하는거.(내용이 -비밀글 입니다- 이렇게 뜨게 -->
	<select id = "selectQuestionOne" resultType = "java.util.HashMap">
		select bw.bw_no, bw.bw_title, bw.bw_content, bw.m_no, bw.s_no, s.s_content, bw.bw_written_date, bw.bw_updated_date, bw.bw_hit, m.m_nick, bw.bt_no
		from board_write bw, member m, subject s
		where bw.m_no = m.m_no and bw.s_no = s.s_no
		and bw.bt_no = 8
		and bw.bw_island = 0
		and bw.bw_no = #{bw_no}
	</select>
	
	
	<!-- 1:1 문의 수정하기 -->
	<update id="modifyQuestion" parameterType="com.soninlawisdice.vo.Board_writeVO">
		<choose>
			<when test="board_writeVO.bw_secret == null">
				update board_write 
				set s_no = #{board_writeVO.s_no}, 
				bw_title = #{board_writeVO.bw_title}, 
				bw_content = #{board_writeVO.bw_content}, 
				bw_secret = 'n',
				bw_updated_date = SYSDATE,
				bw_island = 0 
				where bw_no = #{board_writeVO.bw_no}
			</when>
			<otherwise>
				update board_write 
				set s_no = #{board_writeVO.s_no}, 
				bw_title = #{board_writeVO.bw_title}, 
				bw_content = #{board_writeVO.bw_content}, 
				bw_secret = #{board_writeVO.bw_secret},
				bw_updated_date = SYSDATE,
				bw_island = 0
				where bw_no = #{board_writeVO.bw_no}
			</otherwise>
		</choose>
	</update>
	
	
	<!-- 1:1 문의 삭제하기 -->
	<delete id="deleteQuestion">
		delete from board_write bw where bw.bw_no = #{bw_no}
	</delete>
	
	<!-- 댓글 개수 (댓글 달려있으면 삭제 안되게 하려고)  -->
	<select id = "countBoardComment" resultType = "string">
		select count(*) from cm_comment where cm_type = '게시판' and cm_no2 = #{bw_no}
	</select>
	
	<!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ포인트ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ--> 
	<!-- 글 작성시 10 포인트 적립 -->
	<update id = "boardPointUpdate">
		update member set m_point = m_point + 10 where m_no = #{m_no} 
	</update>
	
	<!--ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 검색 sql ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
	
	<sql id="board_search">
		<if test="scri.searchType != null">
			<if test="scri.searchType == 't'.toString()">AND bw_title LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'c'.toString()">AND bw_content LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'w'.toString()">AND m_nick LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'tc'.toString()">AND (bw_title LIKE '%' || #{scri.keyword} || '%') or (bw_content LIKE '%' || #{scri.keyword} || '%')</if>
		</if>
	</sql>
	
	<!--카페 검색하기  -->
	<sql id="cafe_search">
		<if test="scri.searchType != null">
			<if test="scri.searchType == 't'.toString()">AND c_title LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'c'.toString()">AND c_add LIKE '%' || #{scri.keyword} || '%'</if>
			<!-- <if test="scri.searchType == 'w'.toString()">AND m_nick LIKE '%' || #{scri.keyword} || '%'</if> -->
			<if test="scri.searchType == 'tc'.toString()">AND (c_title LIKE '%' || #{scri.keyword} || '%') or (c_add LIKE '%' || #{scri.keyword} || '%')</if>
		</if>
	</sql>
	<!-- 카페리뷰 검색하기 -->
	<sql id="cafeReview_search">
		<if test="scri.searchType != null">
			<if test="scri.searchType == 't'.toString()">AND cr_title LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'c'.toString()">AND cr_content LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'w'.toString()">AND m_nick LIKE '%' || #{scri.keyword} || '%'</if>
			<if test="scri.searchType == 'tc'.toString()">AND (cr_title LIKE '%' || #{scri.keyword} || '%') or (cr_content LIKE '%' || #{scri.keyword} || '%')</if>
		</if>
	</sql> 
	
	
</mapper>